/**
 * @file hdr_4.h
 * @brief Группировка
 * 
 * \section h2_sec_1 Общие принципы группировки
 * Для группировки отдельных частей, в Doxygen предусмотрены следующие команды:
 * \arg \p \\defgroup -- объявляет новую группу и добавляет в нее элемент(ы).
 * \arg \p \\addtogroup -- добавляет элемент(ы) в группу. Добавлять элементы можно\n
 * только в уже объявленную группу.
 * \arg \p \\ingroup -- указывает на принадлежность группе отдельного класса, файла или пространства имен.
 * 
 * Для выделения нескольких частей программы блоком используется пара \p \@ \p { и \p \@ \p }.
 * 
 * На объявленные группы можно ссылаться командой \p \\ref. Например, это ссылка на группу 1 -- \ref grp_1.
 */

/*! @defgroup grp_1 Группа 1
 *  @brief Краткое описание группы.
 *  @details Мы объединили в группу много разных элементов.
 */
//! @{

//! Краткое описание макроса.
#define MACRO
//! Краткое описание переменной.
double number = -3e8;
//! Краткое описание функции.
void f();
//! Краткое описание пространства имен. Классы пространства имен попадают в группу 
//! автоматически, но дополнительной ссылки на странице группы для классов не будет создано.
//! Обычно это имеет смысл, так как она там просто лишняя. Однако, так как у файла есть описание, то
//! для него будет создана страница, в которую попадут все объяленные элементы в файле.
namespace SomeSpace {
    //! Краткое описание класса 1. Если вам нужна ссылка на странице группы, вы можете указать принадлежность
    //! класса группе явно.
    //! По умолчанию класс отобразится только на странице пространства имен.
    //! @ingroup grp_1
    class Class_1 {};
    //! Краткое описание класса 2.
    //! Ссылка на этот класс отобразится только на странице пространства имен.
    class Class_2 {};
}

//! @}

// Следующие элементы мы добавили к существующей группе. Эти объявления могли бы лежать в
// другом файле, но они лежат здесь для примера.

//! @addtogroup grp_1
//! @{

//! Краткое описание еще одного макроса.
#define MACRO_1
//! Краткое описание еще одной переменной.
int ii = 13;
//! Краткое описание еще одной функции.
void g();

//! @}

/**
 * @brief Краткое описание класса 3.
 * @ingroup grp_1
 * 
 * Детальное описание класса 3. Этот одинокий класс мы можем отнести к первой группе.
 * 
 */
class Class_3 {}

/**
 * @name Локальная группировка
 * @brief Краткое описание.
 * 
 * Такая группировка удобна для перегруженных функций и методов, либо вы можете
 * объединить функции, которые делают примерно одно и тоже.
 */
//!@{

//! Краткое описание функции с аргументом типа \p int.
void function(int a) {
    // код функции.
}
//! Краткое описание функции с аргументом типа \p float.
void function(float a) {
    // код функции
}
//!@}